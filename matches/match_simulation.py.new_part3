    def create_match_event(self, minute, event_type, agent, description):
        """
        Создаём MatchEvent в БД (запись о событии).
        agent.player_model — ссылка на Player
        """
        player_model = agent.player_model if agent else None
        MatchEvent.objects.create(
            match=self.match,
            minute=minute,
            event_type=event_type,
            player=player_model,
            description=description
        )

    def _setup_moments(self):
        """
        Определяем, на каких минутах будет "опасный момент/атака" 
        у home / away.
        """
        base_min, base_max = 10, 20
        home_strength = (self.match_stats['home']['team_attack'] + self.match_stats['home']['team_midfield']) / 2
        away_strength = (self.match_stats['away']['team_attack'] + self.match_stats['away']['team_midfield']) / 2

        home_factor = min(home_strength / 100, 1.0)
        away_factor = min(away_strength / 100, 1.0)

        home_chances = int(base_min + (base_max - base_min) * home_factor)
        away_chances = int(base_min + (base_max - base_min) * away_factor)

        all_minutes = list(range(1, 90))
        random.shuffle(all_minutes)

        self.home_moments_minutes = sorted(all_minutes[:home_chances])
        self.away_moments_minutes = sorted(all_minutes[home_chances:home_chances + away_chances])

    def simulate_minute(self, minute):
        """
        Логика "1 минута матча": создаём MatchEvent'ы (гол, блок и т. д.).
        """
        if minute in self.home_moments_minutes:
            attacking_team = 'home'
        elif minute in self.away_moments_minutes:
            attacking_team = 'away'
        else:
            return  # Ничего не произошло

        # События
        self.create_match_event(minute, 'info', None, "==============================")
        self.create_match_event(minute, 'info', None, f"MOMENT at minute {minute}: {attacking_team.upper()} tries to attack!")
        self.create_match_event(minute, 'info', None, "==============================")

        # Выбираем рандомного игрока из того, что у нас есть в self.player_agents
        if not self.player_agents[attacking_team]:
            # Если вдруг lineup пуст
            logger.warning(f"No players in {attacking_team} lineup to simulate minute {minute}.")
            return

        random_player_id = random.choice(list(self.player_agents[attacking_team].keys()))
        owner_agent = self.player_agents[attacking_team][random_player_id]

        self.create_match_event(
            minute,
            'info',
            owner_agent,
            f"Ball currently owned by {attacking_team.upper()} player {owner_agent.full_name}"
        )

        # 30% шанс гола
        if random.random() < 0.3:
            # Случайный "автор гола"
            scorer_player_id = random.choice(list(self.player_agents[attacking_team].keys()))
            scorer_agent = self.player_agents[attacking_team][scorer_player_id]

            self.match_stats[attacking_team]['goals'] += 1
            if attacking_team == 'home':
                self.match.home_score += 1
            else:
                self.match.away_score += 1
            self.match.save()

            self.create_match_event(
                minute,
                'goal',
                scorer_agent,
                f"GOAL! {scorer_agent.full_name} scores!"
            )
        else:
            # "Shot blocked"
            self.create_match_event(
                minute,
                'info',
                owner_agent,
                "Shot blocked by defenders!"
            )